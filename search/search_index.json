{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kotlin Build Rules Enforcer","text":"<p>Kbre automates generation and update of project files for Gradle and other tools.</p>"},{"location":"#demo","title":"Demo","text":""},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#122-19082024","title":"1.2.2 <sup>19.08.2024</sup>","text":""},{"location":"changelog/#other","title":"Other","text":"<ul> <li>(20af3be) build: extract set-version script for homebrew</li> </ul>"},{"location":"changelog/#121-18082024","title":"1.2.1 <sup>18.08.2024</sup>","text":""},{"location":"changelog/#other_1","title":"Other","text":"<ul> <li>(ad834e3) build: fix build on clean macOS (for CICD)</li> </ul>"},{"location":"changelog/#120-14082024","title":"1.2.0 <sup>14.08.2024</sup>","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>(17786db) added <code>notes</code> param</li> <li>(17786db) introduction of <code>vars</code> folder for extensions</li> <li>(5c02aad) added docs site</li> <li>(5ec6fbc) added generation of completion files for zsh, bash, and fish</li> <li>(6e1613d) added init action</li> <li>(2107d94) added about action</li> </ul>"},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>(9aed75c) load buildDeps from config file</li> </ul>"},{"location":"changelog/#other_2","title":"Other","text":"<ul> <li>(17786db) chore: better docs</li> <li>(5ecdc21) chore: clean-up, it\u2019s not needed now</li> <li>(ec09fd3) build: faster rebuild</li> <li>(dc5ae33) refactor: move update action to dedicated package</li> </ul>"},{"location":"changelog/#110-7082024","title":"1.1.0 <sup>7.08.2024</sup>","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>(552f92c) added buildscript dependencies</li> </ul>"},{"location":"changelog/#other_3","title":"Other","text":"<ul> <li>(5914230) chore: better installation instructions (including homebrew)</li> </ul>"},{"location":"changelog/#100-6082024","title":"1.0.0 <sup>6.08.2024</sup>","text":"<p>Initial public version.</p>"},{"location":"configDirFormat/","title":"Configuration dir description","text":"<p>Top-level folders are <code>presets</code>. It\u2019s like template when you create new project in IDE. Currently, there are 3:</p> <ul> <li><code>cli</code> for Kotlin console apps</li> <li><code>spring</code> for Kotlin web apps</li> <li><code>script</code> for Kotlin scripts</li> </ul>"},{"location":"configDirFormat/#type","title":"Type","text":"<p>Next, <code>type</code> should be selected. It\u2019s main template files. Default is <code>root</code>. It\u2019s for root project. There is idea that in some cases variations of main template files will be needed (with the same extensions).</p> <p>Files with extensions <code>.jar</code> and <code>.bat</code> are considered binary files, and they will be copied without variables substitution. All other files are considered template files and variable substitution will be done.</p>"},{"location":"configDirFormat/#extension","title":"Extension","text":"<p><code>Extension</code> is a most interesting concept. First of all, you can just copy any files. Variables will be substituted. There is also special meaning for following files:</p> <ul> <li><code>gradle/libs.versions.toml</code> \u2013 it will be merged with <code>gradle/libs.versions.toml</code> from <code>type</code></li> <li><code>vars/vAr_NAME.EXTENSION</code> \u2013 it will be added as <code>%VAR_NAME%</code> variable. Extension is ignored, it\u2019s for editors. Case is ignored, it will be uppercase as variable. Values of variable is content of files.</li> </ul> <p>Please, note that <code>project</code> extension name is reserved for data from <code>kbre.yaml</code> file.</p> <p>Files with extensions <code>.jar</code> and <code>.bat</code> are considered binary files, and they will be copied without variables substitution. All other files are considered template files and variable substitution will be done.</p>"},{"location":"configDirFormat/#variable","title":"Variable","text":"<p><code>Variable</code> is key/value. They are defined in kbre.yaml file, and in <code>vars</code> folders in extensions.</p> <p>Pre-defined variables from <code>kbre.yaml</code> file:</p> <ul> <li><code>%PRESET%</code> \u2013 preset</li> <li><code>%TYPE%</code> \u2013 type</li> <li><code>%GROUP%</code> \u2013 maven\u2019s group</li> <li><code>%ARTIFACT%</code> \u2013 in a lot of places used as binary name</li> <li><code>%NAME%</code> \u2013 some human app name</li> <li><code>%DESCRIPTION%</code> \u2013 human app description</li> <li><code>%NOTES%</code> \u2013 instructions what to do after generation</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#configuration-repository","title":"Configuration repository","text":"<p>It\u2019s better to fork default repository, and use it from the beginning.</p> <p>Default configuration: <pre><code>cd ~\ngit clone https://github.com/stepin/kbre-default-config .krbe\n</code></pre></p>"},{"location":"installation/#binary","title":"Binary","text":""},{"location":"installation/#installation-using-brew","title":"Installation using Brew","text":"<pre><code>brew install stepin/tools/kbre\n</code></pre>"},{"location":"installation/#installation-using-docker","title":"Installation using Docker","text":"<pre><code>alias kbre='docker run --rm -it -v $PWD:/data -w /data --user \"$(id -u)\" stepin/kbre'\nkbre version\n</code></pre>"},{"location":"installation/#zip-archive","title":"Zip archive","text":"<p>Binaries can be downloaded from GitHub Release page.</p>"},{"location":"kbreFileFormat/","title":"Kbre.yaml File Format","text":"<p>Internally, kbre.yaml provides <code>project</code> extension.</p> <p>Top-level keys:</p> <ul> <li>group (string) \u2013 artifact group like <code>com.example</code></li> <li>artifact (string) \u2013 artifact id, used in many places, like <code>my-project</code></li> <li>name (optional, string) \u2013 human-readable project name, defaults to artifact</li> <li>description (optional, string) \u2013 human-readable project description</li> <li>preset (string) \u2013 folder inside templates directory</li> <li>type (string) \u2013 folder inside preset directory</li> <li>extensions (array of strings) \u2013 folders inside preset/extensions directory</li> <li>variables (optional, map of strings to strings) \u2013 variables that will be used in templates or extensions</li> <li>notes (optional, string) \u2013 message that should be shown after successful <code>new</code> or <code>update</code> action</li> </ul> <p>All params in the file are optional but if param is not optional and it\u2019s missing in the file it should be defined using cli parameter.</p>"},{"location":"limitations/","title":"Limitations","text":"<ul> <li>it\u2019s unclear how to set up unit tests for Kotlin Native properly (so, currently coverage is low as it\u2019s unclear how it should be)</li> <li>maybe support of <code>libs.versions.toml</code> has problems in some corner cases: it\u2019s interesting to have examples</li> <li>it\u2019s unclear how to build Kotlin Native in Docker: in all cases it\u2019s not working for me (but maybe it\u2019s ram limitation, unclear). There is ticket about it: https://youtrack.jetbrains.com/issue/KT-39895/Missing-Documentation-On-Using-Kotlin-Native-With-Docker .   So, for now, binaries are just added to Docker image.</li> <li>binary files detection is really simple now</li> <li>Alpine is not supported as Kotlin compiler don\u2019t work with <code>musl libc</code>. Even <code>gcompat</code> package don\u2019t fix it (most probably some detection problem).</li> <li>Kotlin Native compiler is not available for Linux ARM, only for macOS ARM. So, no ARM docker images. Missing file: https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-native-prebuilt/2.0.0/kotlin-native-prebuilt-2.0.0-linux-aarch64.tar.gz   It means that we need to compile binaries on 1 supported arch, then add them into docker images.</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-new-project","title":"Create new project","text":"<p>You can do it in interactive way using:</p> <pre><code>mkdir my-app\ncd my-app\n\nkbre init\n</code></pre> <p>or you can create yaml file manually: <pre><code>mkdir my-app\ncd my-app\n\ncat &gt; kbre.yaml &lt;&lt; \\EOF\ngroup: name.stepin\nartifact: myapp\nname: My app\ndescription: Some description\npreset: spring\ntype: root\nextensions:\n  - graphql\n  - postgres\n  - flyway\n  - jooq\n  - dokka\n  - jib\n  - local-dev\n  - systemd-deployment\nvariables:\n  REPO: http://localhost:3000/stepin/kotlin-bootstrap-app/src/branch/main/src/main/kotlin\n  SONAR_HOST_URL: http://localhost:9000\n  SONAR_PROJECT_KEY: kotlin-bootstrap-app\n  SONAR_PROJECT_NAME: kotlin-bootstrap-app\n  SONAR_TOKEN: sqp_821b1d3209761625bdd29259674237d429bce626\nEOF\n\nkbre new\n</code></pre></p>"},{"location":"usage/#update","title":"Update","text":"<p>It should be safe to run following command: <pre><code>cd my-app\n\nkbre update\n</code></pre></p> <p>Time to time it\u2019s also good to run: <pre><code>cd my-app\n\nkbre new\n</code></pre></p> <p>It will update also files that most probably have local changes but sometimes it also make sense.</p>"},{"location":"why/","title":"Why?","text":"<p>If you try to use https://start.spring.io/ , https://kmp.jetbrains.com/ , https://start.ktor.io/ , or https://code.quarkus.io/ you will find out that:</p> <ol> <li>it\u2019s not enough \u2013 a lot of things needs to be configured after download</li> <li>it\u2019s hard to update: update is done only manually</li> </ol> <p>It\u2019s clear that for each company / team / individual templates should be different. That\u2019s why https://github.com/stepin/kbre-default-config is done as starting point, but you need to adapt it according to your preferences.</p> <p>kbre tool uses your templates to create and update repos.</p> <p>kbre started as Gradle macros tool, but now it doesn\u2019t depend on Gradle, and it can be used with any language.</p>"}]}